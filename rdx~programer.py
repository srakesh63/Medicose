# -*- coding: utf-8 -*-
"""RDX~PROGRAMER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YXia4nQG2uHJvnfeYoHF7D6sGs01XDDm
"""

!pip install transformers torch gradio accelerate bitsandbytes pillow pytesseract -q
!apt-get install tesseract-ocr -q

import torch
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import gradio as gr
from PIL import Image
import pytesseract
import warnings
warnings.filterwarnings("ignore")

class MedicalPrescriptionVerifier:
    def __init__(self):
        self.model_name = "ibm-granite/granite-3.2-2b-instruct"
        self.load_model()

    def load_model(self):
        print("Loading model...")
        self.tokenizer = AutoTokenizer.from_pretrained(self.model_name, trust_remote_code=True)
        self.model = AutoModelForCausalLM.from_pretrained(
            self.model_name,
            torch_dtype=torch.float16,
            device_map="auto",
            trust_remote_code=True
        )

        self.generator = pipeline(
            "text-generation",
            model=self.model,
            tokenizer=self.tokenizer,
            torch_dtype=torch.float16,
            device_map="auto"
        )
        print("Model loaded successfully")

    def extract_text_from_image(self, image):
        if image is None:
            return ""
        try:
            return pytesseract.image_to_string(image, lang='eng').strip()
        except Exception as e:
            return f"Error: {str(e)}"

    def generate_response(self, prompt):
        formatted_prompt = f"""<|system|>
You are a medical AI assistant for prescription verification. Provide accurate analysis for educational purposes only.
<|user|>
{prompt}
<|assistant|>
"""

        try:
            outputs = self.generator(
                formatted_prompt,
                max_new_tokens=400,
                temperature=0.7,
                do_sample=True,
                pad_token_id=self.tokenizer.eos_token_id
            )
            return outputs[0]['generated_text'].split("<|assistant|>")[-1].strip()
        except Exception as e:
            return f"Error: {str(e)}"

    def verify_dosage(self, prescription_text):
        prompt = f"""Analyze prescription dosage: {prescription_text}

Check: 1) Dosage appropriateness 2) Frequency clarity 3) Duration specified 4) Safety concerns"""
        return self.generate_response(prompt)

    def check_interactions(self, prescription_text):
        prompt = f"""Check drug interactions in: {prescription_text}

Identify: 1) All medications 2) Potential interactions 3) Severity levels 4) Recommendations"""
        return self.generate_response(prompt)

    def validate_format(self, prescription_text):
        prompt = f"""Validate prescription format: {prescription_text}

Check: 1) Patient info 2) Prescriber details 3) Drug specifications 4) Missing elements"""
        return self.generate_response(prompt)

    def analyze_contraindications(self, prescription_text, patient_info=""):
        prompt = f"""Analyze contraindications for: {prescription_text}
Patient info: {patient_info}

Check: 1) Age considerations 2) Medical conditions 3) Allergies 4) Safety warnings"""
        return self.generate_response(prompt)

    def comprehensive_analysis(self, prescription_text, image=None, patient_info=""):
        if image:
            extracted = self.extract_text_from_image(image)
            if extracted and "Error" not in extracted:
                prescription_text += f"\n\nFrom image: {extracted}"

        prompt = f"""Complete prescription analysis: {prescription_text}
Patient: {patient_info}

Provide: 1) Completeness check 2) Dosage analysis 3) Safety assessment 4) Recommendations 5) Score (1-10)"""
        return self.generate_response(prompt)

# Initialize system
verifier = MedicalPrescriptionVerifier()

# Create Gradio interface
with gr.Blocks(title="Medical Prescription AI") as demo:
    gr.HTML("<h1 style='text-align: center'>üè• Medical Prescription Verification AI</h1>")
    gr.HTML("<p style='text-align: center'><b>‚ö†Ô∏è Educational Use Only - Not Medical Advice</b></p>")

    with gr.Tabs():
        with gr.Tab("Complete Analysis"):
            with gr.Row():
                with gr.Column():
                    prescription_input = gr.Textbox(label="Prescription Text", lines=4)
                    patient_input = gr.Textbox(label="Patient Info (Optional)", lines=2)
                    image_input = gr.Image(label="Prescription Image", type="pil")
                    analyze_btn = gr.Button("Analyze", variant="primary")
                with gr.Column():
                    analysis_output = gr.Textbox(label="Analysis Result", lines=15)

            analyze_btn.click(
                verifier.comprehensive_analysis,
                inputs=[prescription_input, image_input, patient_input],
                outputs=analysis_output
            )

        with gr.Tab("Dosage Check"):
            dosage_input = gr.Textbox(label="Prescription", lines=3)
            dosage_btn = gr.Button("Check Dosage")
            dosage_output = gr.Textbox(label="Dosage Analysis", lines=8)
            dosage_btn.click(verifier.verify_dosage, inputs=dosage_input, outputs=dosage_output)

        with gr.Tab("Drug Interactions"):
            interaction_input = gr.Textbox(label="Prescription", lines=3)
            interaction_btn = gr.Button("Check Interactions")
            interaction_output = gr.Textbox(label="Interaction Analysis", lines=8)
            interaction_btn.click(verifier.check_interactions, inputs=interaction_input, outputs=interaction_output)

        with gr.Tab("Format Validation"):
            format_input = gr.Textbox(label="Prescription", lines=3)
            format_btn = gr.Button("Validate Format")
            format_output = gr.Textbox(label="Format Report", lines=8)
            format_btn.click(verifier.validate_format, inputs=format_input, outputs=format_output)

        with gr.Tab("Safety Check"):
            with gr.Row():
                with gr.Column():
                    safety_prescription = gr.Textbox(label="Prescription", lines=3)
                    safety_patient = gr.Textbox(label="Patient Info", lines=2)
                    safety_btn = gr.Button("Check Safety")
                with gr.Column():
                    safety_output = gr.Textbox(label="Safety Analysis", lines=8)
            safety_btn.click(
                verifier.analyze_contraindications,
                inputs=[safety_prescription, safety_patient],
                outputs=safety_output
            )

        with gr.Tab("OCR Extract"):
            ocr_image = gr.Image(label="Upload Image", type="pil")
            ocr_btn = gr.Button("Extract Text")
            ocr_output = gr.Textbox(label="Extracted Text", lines=6)
            ocr_btn.click(verifier.extract_text_from_image, inputs=ocr_image, outputs=ocr_output)

# Launch
demo.launch(share=True)